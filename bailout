#!/bin/bash 

# Copyright 2024 Richard Kaler 

# This script is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 3 of the License, or (at
# your option) any later version.

# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

#This is just a way to kill things without using a file. Example 

#NOTE: Right now this program is optimized for any PID management attempt - but I will rework it specifically for Firefox. Just a couple of tweaks are necessary. If you're going to run my Firefox overload code, 
#you need a way to bail out of the overload process. You can do that with this. Simply run: [ pidkiller firefox ] and all of the firefox instances will tank. There are a few honorable programs which will 
#help a person manage memory on Linux. A quick list: 

#top
#htop
#glances
#atop
#ps (an oldie but a goodie - and there are variations of it) 
#ps aux | [ program name ]
#free || free -h 
#swapon -s || swapon --show
#lsof [arg] 
#lsof -u $(whoami) ... this output is going to be general and verbose
#lsof -i TCP | grep $(whoami)  


#A few quick notes! For one, swap, iowait, memory - they are all tied together. IOwait caused by a remotely mounted disk alone can falsely appear to the administrator as a RAM shortage issue.
#If the processor has to wait for a latent disk, the entire system will suffer - and depending on what you're doing, the impact may be noticable. This program kills processes that are tanking memory. 
#NOTE: You should not be running something like this as your first option but if you do run it, I am mindful of the power a kill process can have so I have used kill -9 as it is generally safer than something
#like killall [ arg ]



proctree=$(pgrep "${1}")

while : 
do

if  [[ "$#" -lt 1 ]]; then 
    echo This script requires an argument 
    echo Ex: pidkiller firefox
    exit 1
fi

if [[ -z $proctree ]]; then 
    echo No processes related to "${1}" exist 
    echo Enter a program with a process running. Exiting script 
    exit 1
else 
    
    echo "$proctree" | while read -r line
    do
        if kill -9 "$line"; then 
            echo killed "$line"
        else 
            echo failed to kill "$line"
        fi 
    done   
    sleep 1s
    if ! pgrep "${1}"; then 
        echo successfully killed all processees related to "${1}" 
        exit 0
    else 
        procremain=$(pgrep "${1}")
        echo failed to kill some processes related to "${1}"
        echo pid "${procremain}" related to "${1}" still active 
        exit 1
    fi    
fi
break 
done
